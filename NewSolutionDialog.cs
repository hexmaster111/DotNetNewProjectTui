
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.23.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace NewSolutionDialog
{
    using System;
    using System.Diagnostics;
    using NStack;
    using Terminal.Gui;
    using static Template;

    public partial class NewSolutionDialog
    {

        private List<Template> templates;
        private readonly Language defaultLanguage;
        Action<Template, string, string, string, Language> createFunction;

        public NewSolutionDialog(IEnumerable<Template> templates, Language defaultLanguage,
        Action<Template, string, string, string, Language> createFunction)
        {
            InitializeComponent();
            this.templates = templates.ToList();
            this.defaultLanguage = defaultLanguage;
            this.createFunction = createFunction;
            lvAvalableTemplates.SetSource(this.templates);
            lvAvalableTemplates.SelectedItemChanged += LvAvalableTemplates_SelectedItemChanged;
            btnDir.Clicked += BtnDir_Clicked;
            tfSearchBox.TextChanged += TfSearchBox_TextChanged;
            cbLanguage.SetSource(Enum.GetValues(typeof(Language)).Cast<Language>()
                      .Select(x => x.LanguageToString()).ToList());
            cbLanguage.SelectedItem = GetLaungaugeIndex(defaultLanguage);

            tfSolutionDir.Text = Environment.CurrentDirectory;

            tfProjectName.TextChanged += (_) => ftProjectItemChanged();
            tfSolutionDir.TextChanged += (_) => ftProjectItemChanged();
            tfSolutionName.TextChanged += (_) => ftProjectItemChanged();
            cbLanguage.SelectedItemChanged += (_) => ftProjectItemChanged();

            btnCreate.Clicked += btnCreate_OnClick;

        }

        private void btnCreate_OnClick()
        {
            var solutionName = tfSolutionName.Text.ToString();
            var projectName = tfProjectName.Text.ToString();
            var solutionDirectory = tfSolutionDir.Text.ToString();


            var languageIndex = cbLanguage.SelectedItem;
            var language = Enum.GetValues(typeof(Language)).Cast<Language>()
                .Select(x => x.LanguageToString())
                .ToList()[languageIndex].LanguageFromString();

            var template = templates[lvAvalableTemplates.SelectedItem];
            createFunction?.Invoke(template, solutionName, projectName, solutionDirectory, language);

        }

        private void ftProjectItemChanged()
        {
            var solutionName = tfSolutionName.Text.ToString();
            var projectName = tfProjectName.Text.ToString();
            var solutionDirectory = tfSolutionDir.Text.ToString();


            var languageIndex = cbLanguage.SelectedItem;
            var language = Enum.GetValues(typeof(Language)).Cast<Language>()
                .Select(x => x.LanguageToString())
                .ToList()[languageIndex].LanguageFromString();


            var template = templates[lvAvalableTemplates.SelectedItem];
            var changes = DotNetTemplateParcer.GetProjectedChanges
            (template, solutionName, projectName, solutionDirectory, language);
            lvProjectStructure.SetSource(changes);
        }

        private int GetLaungaugeIndex(Language language)
        {
            return Enum.GetValues(typeof(Language)).Cast<Language>()
                .Select(x => x.LanguageToString())
                .ToList().IndexOf(language.LanguageToString());
        }

        private void TfSearchBox_TextChanged(ustring obj)
        {
            var search = obj.ToString().ToLower();
            if (search == string.Empty || search == "search...")
            {
                lvAvalableTemplates.SetSource(templates);
                return;
            }

            var filteredTemplates = templates
                .Where(t =>
                    t.Name.ToLower().Contains(search) ||
                    t.Author.ToLower().Contains(search) ||
                    t.Tags.Any(tag => tag.ToLower().Contains(search)) ||
                    t.ShortNames.Any(sn => sn.ToLower().Contains(search)));

            lvAvalableTemplates.SetSource(filteredTemplates.ToList());
        }

        private void BtnDir_Clicked()
        {
            var dialog = new OpenDialog("Select a directory", "Select", null, OpenDialog.OpenMode.Directory);
            Application.Run(dialog);
            tfSolutionDir.Text = dialog.FilePath;
        }

        private void LvAvalableTemplates_SelectedItemChanged(ListViewItemEventArgs obj)
        {
            var template = (Template)obj.Value;
            UpdateTemplateBeingShown(template);
        }

        private void UpdateTemplateBeingShown(Template template)
        {
            lblTemplateAuthor.Text = template.Author;
            lblTemplateName.Text = template.Name;

            if (!template.LanguagesSupported.Contains(defaultLanguage))
                cbLanguage.SelectedItem = GetLaungaugeIndex(template.LanguagesSupported.First());
            else
                cbLanguage.SelectedItem = GetLaungaugeIndex(defaultLanguage);

            var reccomenedSolutionName = template.ShortNames.First();
            var reccomenedProjectName = template.ShortNames.First();
            tfSolutionName.Text = reccomenedSolutionName;
            tfProjectName.Text = reccomenedProjectName;
        }
    }
}
